// Generated by CoffeeScript 1.4.0
var auth, delay, get, get_raw, log, q, root, user;

log = function() {
  return typeof console !== "undefined" && console !== null ? typeof console.log === "function" ? console.log.apply(console, arguments) : void 0 : void 0;
};

delay = function(f, t) {
  return setTimeout(t, f);
};

q = function(query) {
  return document.querySelector(query);
};

Node.prototype.q = function(query) {
  return this.querySelector(query);
};

Object.getOwnPropertyNames(Array.prototype).forEach(function(prop) {
  if (Array.prototype[prop] != null) {
    if ((typeof Array.prototype[prop]) === "function") {
      return NodeList.prototype[prop] = Array.prototype[prop];
    }
  }
});

user = "jiyinyiyong";

if (location.hash.match(/#\w+/)) {
  user = location.hash.match(/#(\w+)/)[1];
}

auth = "client_id=...&client_secret=...";

auth = "";

root = function(username, reponame) {
  return "https://api.github.com/repos/" + username + "/" + reponame + "/contents/";
};

get = function(path, callback) {
  var req, the_path;
  req = new XMLHttpRequest;
  log("get:", path);
  if (path.indexOf("?") >= 0) {
    the_path = path + "&" + auth;
    log("the_path", the_path);
    req.open("get", the_path);
  } else {
    the_path = path + "?" + auth;
    log("the_path", the_path);
    req.open("get", the_path);
  }
  req.onload = function(res) {
    var text;
    text = res.target.response;
    return callback(JSON.parse(text));
  };
  return req.send();
};

get_raw = function(path, callback) {
  var req, the_path;
  req = new XMLHttpRequest;
  log("get:", path);
  if (path.indexOf("?") >= 0) {
    the_path = path + "&" + auth;
    log("the_path", the_path);
    req.open("get", the_path);
  } else {
    the_path = path + "?" + auth;
    log("the_path", the_path);
    req.open("get", the_path);
  }
  req.setRequestHeader("Accept", "application/vnd.github.VERSION.raw");
  req.onload = function(res) {
    var text;
    text = res.target.response;
    return callback(text);
  };
  return req.send();
};

window.onload = function() {
  var el, render_file, render_list;
  el = {
    list: q("#list"),
    user: q("#user"),
    page: q("#page")
  };
  marked.setOptions({
    breaks: true
  });
  get("https://api.github.com/users/" + user, function(data) {
    log(data);
    return el.user.q(".profile").appendChild(lilyturf.dom(function() {
      return this.div({}, this.img({
        src: data.avatar_url
      }), this.div({
        "class": "username"
      }, this.text(data.name)), this.div({
        "class": "location"
      }, this.text(data.location)));
    }));
  });
  get("https://api.github.com/users/" + user + "/repos?type=owner&sort=updated", function(data) {
    log(data);
    return data.forEach(function(repo) {
      var elem;
      elem = lilyturf.dom(function() {
        return this.div({
          "class": "repo"
        }, this.p({
          "class": "repo-name"
        }, this.text(repo.name)), this.p({
          "class": "description"
        }, this.text(repo.description)));
      });
      el.user.q(".repos").appendChild(elem);
      return elem.onclick = function() {
        var contents;
        log(repo.contents_url);
        el.list.q(".repo").innerText = repo.name;
        el.list.q(".path").innerText = "";
        contents = repo.contents_url.replace("{+path}", "");
        get(contents, render_list);
        return el.list.q(".repo").onclick = function() {
          return get(contents, render_list);
        };
      };
    });
  });
  render_list = function(list) {
    el.list.q(".list").innerHTML = "";
    return list.forEach(function(file) {
      var elem;
      elem = lilyturf.dom(function() {
        return this.div({
          "class": file.type
        }, this.text(file.name));
      });
      el.list.q(".list").appendChild(elem);
      return elem.onclick = function() {
        log("click:", file);
        el.list.q(".path").innerText = file.path;
        if (file.type === "dir") {
          return get(file.url, render_list);
        } else {
          return get_raw(file.url, function(text) {
            return render_file(text, file.path);
          });
        }
      };
    });
  };
  return render_file = function(text, path) {
    page.innerHTML = "";
    if (path.match(/\w+\.(md)$/)) {
      return page.innerHTML = marked(text);
    } else if (path.match(/\w+\.(png)|(jpg)|(jpeg)|(gif)$/i)) {
      return page.innerText = "Images are not available";
    } else {
      return page.appendChild(lilyturf.dom(function() {
        return this.pre({}, this.code({}, this.text(text)));
      }));
    }
  };
};
